swagger: '2.0'
info:
  description:
    Mydiary is an online journal that allows users to pen down their thought anywhere.
  version: 1.0.0
  title: myDiary
  contact:
    email: shinezee54@gmail.com
host: - https://my-diary-collins.herokuapp.com/
basePath: "/"
tags:
- name: entry
  description: Operation about user diary entries
  externalDocs:
    description: Find out more
    url: https://my-diary-collins.herokuapp.com/
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about my diary
    url: https://my-diary-collins.herokuapp.com/
schemes:
- "https"
- "http"
paths:
  /entry/{entryId}:
     get:
      tags:
      - entry
      summary: Find  Entry by ID
      description: Returns a single entry
      operationId: getEntryById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: entryId
        in: path
        description: ID of entry to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Entries'
        404:
          description: entry not found
        401:
            description: "No token provided"
        500:
           description: "Server Error"    
  /entries/{entryId}:
    get:
      tags:
      - entry
      summary: Get entries with limit five and offset entryID
      description: Returns an  array of entry
      operationId: getAllEntry
      produces:
      - application/json
      - application/xml
      parameters:
      - name: entryId
        in: path
        description: offset to be used for querry
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Entries'
        404:
          description: entry not found
        401:
            description: "No token provided"
        500:
           description: "Server Error"  
    put:
      tags:
      - entry
      summary: Updates a entry in the diary with form data
      operationId: updateEntryWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: entryId
        in: path
        description: ID of entry that needs to be updated
        required: true
        type: integer
        format: int64
      - name: title
        in: formData
        description: Updated title of the entry
        required: true
        type: string
      - name: content
        in: formData
        description: Updated content of the entry
        required: true
        type: string
      responses:
        200:
          description: successul operation
        404:
          description: Entry not found
        401:
            description: "No token provided"
        500:
           description: "Server Error"
    delete:
      tags:
      - entry
      summary: Deletes an entry
      operationId: deleteEntry
      produces:
      - application/json
      - application/xml
      parameters:
      - name: entryId
        in: path
        description: entry id to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successul operation
        400:
          description: Invalid ID provided
        404:
          description: entry not found
        401:
            description: "No token provided"
        500:
          description: "Server Error"  
      security:
      - myDiary_auth:
        - write:entry
        - read:entry
  /auth/signup:
    post:
      tags:
      - user
      summary: Creates a new user
      description: This is used to create a new user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: "successfully created"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Missing required parameter" 
        500:
          description: "server Error"
          
  /auth/login:
    post:
      tags:
      - user
      summary: Existing user use this to gain access into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        200:
          description: "successfully operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Missing required parameter" 
        500:
          description: "server Error"
  /user/:
    get:
      tags:
      - user
      summary: Find user information
      description: Provides the information for a particular user
      produces:
      - application/json
      - application/xml
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          enum:
          - available
          - pending
          - sold
          default: available
        collectionFormat: multi
      responses:
        200:
          description: User detail Found
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: User not found
        500:
          description: "server Error"  
      security:
      - myDiary_auth:
        - write:entry
        - read:entry        
securityDefinitions:
  myDiary_auth:
    type: oauth2
    authorizationUrl: http://mydiary.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:entry: modify entry in your account
      read:entry: read your entry
  api_key:
    type: apiKey
    name: token
    in: header
definitions:
  Entries:
    type: object
    properties:
      entryId:
        type: integer
        format: int64
      userId:
        type: integer
        format: int64
      entrytitle:
        type: string
        format: int32
      entrycontent:
        type: string
        format: int32
      entryDate:
        type: string
        format: int32  
    xml:
      name: Entries
  User:
    type: object
    properties:
      userId:
        type: integer
        format: int64
      email:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      regDate:
        type: string
    xml:
      name: User
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /shinezee/myDiary/1.0.0
schemes:
 - https
 - http